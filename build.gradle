plugins {
}

apply plugin: 'java'
version = '1.0.0'
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    testImplementation files('libs/ares-2.0.0-SNAPSHOT.jar')
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit-pioneer:junit-pioneer:2.2.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-launcher:1.10.2'
    testImplementation 'ch.qos.logback:logback-classic:1.5.3'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.assertj:assertj-core:3.25.3'
    testImplementation 'org.json:json:20240303'
    testImplementation 'info.debatty:java-string-similarity:2.0.0'
    testImplementation 'com.github.javaparser:javaparser-core:3.25.9'
    testImplementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.9'
    testImplementation 'com.tngtech.archunit:archunit:1.3.0'
    testImplementation 'org.jgrapht:jgrapht-core:1.5.2'
    testImplementation 'org.junit.platform:junit-platform-testkit:1.10.2'
    testImplementation 'net.jqwik:jqwik:1.8.4'
    testImplementation 'org.apiguardian:apiguardian-api:1.1.2'
    testImplementation 'org.aspectj:aspectjrt:1.9.22'
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.17.2'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'

    // testImplementation(':test')
    // testImplementation(':test-Solution')
}

def assignmentSrcDir = "ge95naltestcoursetest-solution/src"
def studentOutputDir = sourceSets.main.java.destinationDirectory.get()

sourceSets {
    test {
        java {
            srcDir 'test'
        }
        resources {
            srcDir 'test'
        }
    }


    main {
        java {
            srcDirs = [assignmentSrcDir]
        }
        resources {
            srcDirs = []
        }
    }
}

def forbiddenPackageFolders = [ //(2)
                                "$studentOutputDir/ch/qos/logback/",
                                "$studentOutputDir/com/github/javaparser/",
                                "$studentOutputDir/com/intellij/",
                                "$studentOutputDir/com/sun/",
                                "$studentOutputDir/de/tum/in/test/api/",
                                "$studentOutputDir/java/",
                                "$studentOutputDir/javax/",
                                "$studentOutputDir/jdk/",
                                "$studentOutputDir/net/jqwik/",
                                "$studentOutputDir/org/assertj/",
                                "$studentOutputDir/org/apache/",
                                "$studentOutputDir/org/eclipse/",
                                "$studentOutputDir/org/gradle/",
                                "$studentOutputDir/org/jacoco/",
                                "$studentOutputDir/org/json/",
                                "$studentOutputDir/org/junit/",
                                "$studentOutputDir/org/opentest4j/",
                                "$studentOutputDir/sun/",
                                "$studentOutputDir/worker/org/gradle/"
]
test {
    doFirst { //(1)
        for (String packageFolder in forbiddenPackageFolders) {
            assert !file(packageFolder).exists(): "$packageFolder must not exist within the submission."
        }
    }
    defaultCharacterEncoding = 'UTF-8'
    testLogging.showStandardStreams = true
    useJUnitPlatform()
}




